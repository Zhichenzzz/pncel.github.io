// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:data.db"
}

model Tag {
  id Int @id @default(autoincrement())

  // @type: enum TagType (src/data/enums.ts)
  type String?

  // @level: importance gauge. default to 0
  //    0: only available for search. never explicitly displayed
  //  100: min level (inclusive) to show in pub entries
  //  255: always display
  //
  //   - Tags are sorted in descending order per "level" in
  //     pub entries
  level Int?

  label String
  pubs  Publication[]
}

model News {
  id Int @id @default(autoincrement())

  // @type: enum NewsType (src/data/enums.ts)
  type String?
}

model Person {
  id           Int     @id @default(autoincrement())
  firstname    String
  lastname     String
  goby         String?
  middlename   String?
  externalLink String?

  // @member: if none, this is a person outside of our group
  //  persons outside of our group are used for collaborators and such
  member Member?

  pubs Publication[]
}

// additional information for group members
model Member {
  // @memberId: for team/[memberId] and locating mdx
  memberId String @id

  // @role: enum MemberRole (src/data/enums.ts)
  role String?

  position  String
  email     String
  person    Person    @relation(fields: [personId], references: [id])
  personId  Int       @unique
  whenLeft  DateTime? // if set, this member is an alumnus
  avatar    String?
  shortbio  String?
  office    String?
  gscholar  String?
  orcid     String?
  github    String?
  linkedin  String?
  twitter   String?
  facebook  String?
  instagram String?
  youtube   String?

  useSelectedPubs Boolean?
  selectedPubs    Publication[]
}

model Venue {
  id   String @id
  name String
  abbr String

  // @type: enum VenueType (src/data/enums.ts)
  type String?

  pubs Publication[]
}

model PubResource {
  id    Int         @id @default(autoincrement())
  label String
  link  String
  pub   Publication @relation(fields: [pubId], references: [id])
  pubId Int

  // @icon: enum LinkIcon (src/data/enums.ts)
  icon String?
}

model Publication {
  id   Int   @id @default(autoincrement())
  tags Tag[]

  // standard fields that map to Bibtex well
  // @type: enum PubType (src/data/enums.ts)
  type        String?
  authors     Person[]
  title       String
  venue       Venue     @relation(fields: [venueId], references: [id])
  venueId     String
  time        DateTime?
  location    String?
  booktitle   String? // or `journal` for journal papers
  volume      Int?
  number      Int?
  doi         String?
  fromPage    Int?
  toPage      Int?
  authorsCopy String?
  venueLink   String?

  authorOrder  String // JSON array of person ids to order the authors correctly
  equalContrib Int? // the first N authors have equal contributions
  notPncel     Boolean?
  resources    PubResource[]
  selectedBy   Member[]
}

model Project {
  // @projectId: for project/[projectId] and locating mdx
  projectId String @id

  thumbnail String // used in project cards
  title     String
  abstract  String
}
